#!/usr/bin/python2.7
# MIT License
# 
# Copyright (c) 2020, Jan Henrik Sawatzki
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from datetime import datetime
import json
import pytz
import Queue
import requests
import sys
from threading import Semaphore, Thread
import time
import traceback

from hosted import config, node

config.restart_on_update()

def current_time():
    return datetime.utcnow().replace(tzinfo = pytz.utc).astimezone(pytz.timezone(config.timezone)).replace(tzinfo = None)

def send_clock():
    node.send('/clock/formatted:%s' % current_time().strftime(config.time_fmt))

def idle(seconds):
    end = time.time() + seconds
    while time.time() < end:
        send_clock()
        time.sleep(0.5)

def celsius_2_kelvin(celsius):
    return celsius + 273.15

def fahrenheit_2_kelvin(fahrenheit):
    return (fahrenheit + 459,67) * (5.0 / 9.0)

def kelvin_2_celsius(kelvin):
    return kelvin - 273.15

def kelvin_2_fahrenheit(kelvin):
    return kelvin * (9.0 / 5.0) - 459,67

def acquire_sensor(date_time, sensor_config):
    sensor = {}

    if sensor_config['sensor_type'].startswith('tasmota_sonoff_th_si7021'):
        sensor['sensor_title'] = sensor_config['sensor_title']
        sensor['sensor_type'] = sensor_config['sensor_type']
        sensor['sensor_temperature_unit'] = sensor_config['sensor_temperature_unit']
        sensor['sensor_display_units'] = 0
        if sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_all' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_temp' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_temp_hum' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_temp_dew':
            sensor['sensor_display_units'] += 1

        if sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_all' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_hum' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_temp_hum' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_hum_dew':
            sensor['sensor_display_units'] += 2

        if sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_all' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_dew' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_temp_dew' or sensor_config['sensor_type'] == 'tasmota_sonoff_th_si7021_hum_dew':
            sensor['sensor_display_units'] += 4

        params['cmnd'] = 'Status 8'
        if sensor_config['sensor_password']:
            params['user'] = 'admin'
            params['password'] = sensor_config['sensor_password']

        sensor_response = json.loads(requests.get('http://' + sensor_config['sensor_host_ip'] + '/cm', params, timeout = 5).text)

        sensor_time = datetime.strptime(sensor_response['StatusSNS']['Time'], '%Y-%m-%dT%H:%M:%S')
        if sensor_time.year < 2020: # Date of sensor is not plausible
            sensor_time = date_time
        sensor['sensor_time'] = sensor_time.strftime(config.time_fmt)

        temperature = sensor_response['StatusSNS']['SI7021']['Temperature']
        humidity = sensor_response['StatusSNS']['SI7021']['Humidity']
        dew_point = sensor_response['StatusSNS']['SI7021']['DewPoint']

        if sensor_config['sensor_temperature_unit'] != config.temperature_unit:
            if sensor_config['sensor_temperature_unit'] == 'celsius' and config.temperature_unit == 'fahrenheit':
                temperature = kelvin_2_fahrenheit(celsius_2_kelvin(temperature))
                dew_point = kelvin_2_fahrenheit(celsius_2_kelvin(dew_point))
            elif sensor_config['sensor_temperature_unit'] == 'celsius' and config.temperature_unit == 'kelvin':
                temperature = celsius_2_kelvin(temperature)
                dew_point = celsius_2_kelvin(dew_point)
            elif sensor_config['sensor_temperature_unit'] == 'fahrenheit' and config.temperature_unit == 'celsius':
                temperature = kelvin_2_celsius(fahrenheit_2_kelvin(temperature))
                dew_point = kelvin_2_celsius(fahrenheit_2_kelvin(dew_point))
            elif sensor_config['sensor_temperature_unit'] == 'fahrenheit' and config.temperature_unit == 'kelvin':
                temperature = fahrenheit_2_kelvin(temperature)
                dew_point = fahrenheit_2_kelvin(dew_point)
            elif sensor_config['sensor_temperature_unit'] == 'kelvin' and config.temperature_unit == 'celsius':
                temperature = kelvin_2_celsius(temperature)
                dew_point = kelvin_2_celsius(dew_point)
            elif sensor_config['sensor_temperature_unit'] == 'kelvin' and config.temperature_unit == 'fahrenheit':
                temperature = kelvin_2_fahrenheit(temperature)
                dew_point = kelvin_2_fahrenheit(dew_point)

        temperature = str(temperature)
        humidity = str(humidity)
        dew_point = str(dew_point)
        sensor['values'] = {}
        sensor['values']['temperature'] = temperature.replace('.', ',') if config.dec_sep == 'comma' else temperature
        sensor['values']['humidity'] = humidity.replace('.', ',') if config.dec_sep == 'comma' else humidity
        sensor['values']['dew_point'] = dew_point.replace('.', ',') if config.dec_sep == 'comma' else dew_point

#    elif sensor.sensor_type == '': TODO Add more sensor types
#    else:
        # Sensor type not supported!
    return sensor

def acquire_sensors(date_time, queue):
    sensors = []

    for sensor_config in config.sensors:
        queue.put((sensors, date_time, sensor_config))

    # Causes the main thread to wait for the queue to finish processing all the tasks
    queue.join()

    with file('sensors.json', 'wb') as f:
        f.write(json.dumps(sensors, ensure_ascii=False).encode('utf8'))

class SensorDownloadWorker(Thread):
    def __init__(self, queue, semaphore):
        Thread.__init__(self)
        self.queue = queue
        self.semaphore = semaphore

    def run(self):
        while 1:
            # Get the work from the queue and expand the tuple
            sensors, date_time, sensor_config = self.queue.get()
            try:
                sensor_data = acquire_sensor(date_time, sensor_config)
                self.semaphore.acquire()
                sensors.append(sensor_data)
                self.semaphore.release()
            finally:
                self.queue.task_done()

def main():
    # Create a queue to communicate with the worker threads
    workQueue = Queue()
    sensorsSemaphore = Semaphore()
    # Create 4 worker threads
    for x in range(4):
        worker = SensorDownloadWorker(workQueue, sensorsSemaphore)
        # Setting daemon to True will let the main thread exit even though the workers are blocking
        worker.daemon = True
        worker.start()

    while 1:
        try:
            now = current_time()
            # Wait for time to be synched
            if now.year < 2020:
                print >>sys.stderr, 'too soon'
                time.sleep(1) # Give the system some time to synch time
                continue

            acquire_sensors(now, workQueue)
            idle(config.refresh_rate)
        except Exception:
            traceback.print_exc()
            time.sleep(30)
        

if __name__ == '__main__':
    main()